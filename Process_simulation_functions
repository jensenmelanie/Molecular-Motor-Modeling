
##---------------------------------------------------
## 1D BM with drift with SWITCHING simulation
##----------------------------------------------------

BMdrift_switch_simulation = function(final_time, Delta, lambdas, etas, switch_pts = c("uniform", 2),plot_it = TRUE){
	
	time_seq = seq(0, final_time, by = Delta)
	num_obs = length(time_seq)
	
	
	if(is.character(switch_pts[1]) == TRUE){
		switch_pts = floor(length(time_seq)*(1:as.numeric(switch_pts[2]))/(as.numeric(switch_pts[2])+1))
		print(paste("Switch points at ", time_seq[switch_pts]))
	}	
	num_switches = length(switch_pts)
	num_states = num_switches + 1
	
	
	if(length(lambdas) != num_states){
		lambdas = rep(lambdas[1], times = num_states)
		print("Number lambdas does not match number of states")
	}
	to_repeat = diff(c(0, switch_pts,  num_obs ))
	lambdas_state_vec = rep(lambdas, to_repeat)

	
	if(length(etas) != num_states){
		etas = rep(etas[1], times = num_states)
		print("Number of etas does not match number of states")
	}
	etas_state_vec = rep(etas, to_repeat )

	
	Xn = c(0);
	for(n in 2:(num_obs)){
		Xn[n] = Xn[n-1] + lambdas_state_vec[n]*Delta + sqrt(Delta/etas_state_vec[n])*rnorm(n =1, mean = 0, sd =1)
	}

	if(plot_it == TRUE){
		plot(time_seq, Xn, type = "l")
		abline(v = time_seq[switch_pts], col = "navy", lty = 4)
		
	}

	return(list(time= time_seq, Xn = Xn, lambdas = lambdas, etas = etas, switch_pts = switch_pts))
	
}


##---------------------------------------------------
## 2D BM with drift SWITCHING simulation
##----------------------------------------------------

BMdrift_switch_2D_simulation = function(final_time, Delta, lambdas, etas, switch_pts = c("uniform", 2),plot_it = TRUE){
	
	time_seq = seq(0, final_time, by = Delta)
	num_obs = length(time_seq)
	
	
	if(is.character(switch_pts[1]) == TRUE){
		switch_pts = floor(length(time_seq)*(1:as.numeric(switch_pts[2]))/(as.numeric(switch_pts[2])+1))
		print(paste("Switch points at ", time_seq[switch_pts]))
	}	
	num_switches = length(switch_pts)
	num_states = num_switches + 1
	
	
	if(length(lambdas) != num_states){
		lambdas = rep(lambdas[1], times = num_states)
		print("Number lambdas does not match number of states")
	}
	to_repeat = diff(c(0, switch_pts,  num_obs ))
	lambdas_state_vec = rep(lambdas, to_repeat)

	
	if(length(etas) != num_states){
		etas = rep(etas[1], times = num_states)
		print("Number of etas does not match number of states")
	}
	etas_state_vec = rep(etas, to_repeat )

	
	Xn = c(0); Yn = c(0)
	for(n in 2:(num_obs)){
		Xn[n] = Xn[n-1] + lambdas_state_vec[n]*Delta + sqrt(Delta/etas_state_vec[n])*rnorm(n =1, mean = 0, sd =1)
		Yn[n] = Yn[n-1] + lambdas_state_vec[n]*Delta + sqrt(Delta/etas_state_vec[n])*rnorm(n =1, mean = 0, sd =1)
	}

	if(plot_it == TRUE){
		plot(time_seq, Xn, type = "l")
		abline(v = time_seq[switch_pts], col = "navy", lty = 4)
		
		plot(time_seq, Yn, type = "l")
		abline(v = time_seq[switch_pts], col = "navy", lty = 4)

		plot( Xn, Yn,type = "l")
		points(Xn[switch_pts], Yn[switch_pts], col = 'navy', pch = 8)
	}

	return(list(time= time_seq, Xn = Xn,Yn = Yn, lambdas = lambdas, etas = etas, switch_pts = switch_pts))
	
}

###======================================================================================
## True Process Simulations
###======================================================================================

##---------------------------------------------------
## Helper functions for Stepping with OU
##----------------------------------------------------
max_less_index_function = function(number, vector){
	return(max(which(vector <= number),0))
}


find_index_function = function(number, vector){
	return(which(vector == number))
}


##---------------------------------------------------
## 1D Motor Stepping, Cargo OU
##----------------------------------------------------


steppingOU_simulation = function(final_time, Delta, lambda, spring_const,D_const,simulation_time_step = 0.001, plot_it = FALSE){

	time_step = simulation_time_step;
	time_seq = seq(0, final_time, by = time_step)
	num_steps = length(time_seq)

	Tn = 0;	time_between_events = c()


	while(Tn < final_time){
		time_between_events = c(time_between_events, rexp(1, lambda))
		Tn = sum(time_between_events)		
	}
	time_events =cumsum(time_between_events)

	Zn = c(0,unlist(lapply(as.list(time_seq[-1]), max_less_index_function, vector = time_events )))

	
##=============================================
##Euler M
##=============================================
Xn_EM = c(rnorm(n = 1, mean = Zn[1],sd = 0.001) )
	
for(n in 1:(length(Zn)-1)){
	Xn_EM[n+1] = Xn_EM[n] - spring_const*(Xn_EM[n]- Zn[n])*time_step + sqrt(D_const*time_step)*rnorm(n = 1, mean =0, sd =1)
}
##=============================================
##Using the exact solution and the fact we know the motor position for 0 <= t <=T_final
##=============================================

Xn_exact = c(rnorm(n = 1, Zn[1], 0.001))
number_events = 0:length(time_between_events)

for( n in 1:(length(Zn)-1)){
	time_bds = c(time_seq[n], time_seq[n+1])
	multiple_event_index = intersect(which(time_events >= time_bds[1]), which(time_events <= time_bds[2]))
	
	if(length(multiple_event_index) == 0){ 
#Case 1: when no events happen between the interval [tn, t_n+1] so Z_n = Z_n+1
		dt_integral = Zn[n+1]*(1 - exp(-diff(time_bds)*spring_const))
	}else{
# Case 2: at least one event occurs between the interval [tn, t_n+1] so Z_n =! Z_n+1	
		time_event_n = sort(c(time_bds, time_events[multiple_event_index]))	
		interval_n  = diff(time_event_n)
		Z_continuous = c(number_events[multiple_event_index], Zn[n+1])
		dt_integral =sum(Z_continuous*(exp(-1*spring_const*(time_bds[2] - time_event_n)[-1]) - exp(-1*spring_const*(time_bds[2] - time_event_n)[-length(time_event_n)] )))
		}
	
	OU_var = (D_const/spring_const)*(1 - exp(-spring_const*time_step*2))
	Xn_exact[n+1] = Xn_exact[n]*exp(-spring_const*time_step) + dt_integral + sqrt(OU_var)*rnorm(1, mean = 0, sd = 1)

	} #end of the simulate Xn - the cargo process


obs_index = seq(1, length(time_seq), by = Delta/time_step)
obs_time = time_seq[obs_index]
obs_Zn = Zn[obs_index]
obs_Xn_EM = Xn_EM[obs_index]; obs_Xn_exact= Xn_exact[obs_index]


if(plot_it == TRUE){
	
plot(time_seq, Zn, type = "l", xlab = "Time", ylab = "Position")
lines(time_seq, Xn_EM, col = "dodgerblue3")
lines(time_seq, Xn_exact, type = "l", col ="springgreen3")
	
plot(obs_time, obs_Zn, type = "l", xlab = "Time", ylab = "Position")
lines(obs_time, obs_Xn_EM, col = "dodgerblue3")
lines(obs_time, obs_Xn_exact, type = "l", col ="springgreen3")
legend("topleft", c("Motor", "EM", "Exact"), col = c("black", "dodgerblue3", "springgreen3"), lty = c(1,1,1))
}

return(list(time = obs_time, motor = obs_Zn, cargo = obs_Xn_exact, cargoEM = obs_Xn_EM))



}




##---------------------------------------------------
## 1D Motor Stepping, Cargo OU with SWITCHING - uniform time step
##----------------------------------------------------



steppingOUswitch_simulation = function(final_time, Delta, lambda_vec, spring_const_vec, D_vec,switch_pts = c("uniform", 2), simulation_time_step = 0.001, plot_it = TRUE){

	time_step = simulation_time_step;
	time_seq = seq(0, final_time, by = time_step)
	num_steps = length(time_seq)


	if(is.character(switch_pts[1]) == TRUE ){
		setting_switch_pts = seq(0,final_time,length = (as.numeric(switch_pts[2])+2))
		switch_pts = round(setting_switch_pts[-c(1, length(setting_switch_pts))]/simulation_time_step)*simulation_time_step
	}


	num_switch = length(switch_pts)
	switch_pts_index = unlist(lapply(as.list(switch_pts), find_index_function, vector = time_seq))
	switch_pts_tfinal = c(time_seq[switch_pts_index], final_time)
	actual_switch_pts = c()
	
	
	Tn = 0;	time_between_events = c()

	ss = 1
	while(Tn < final_time){
		while(Tn < switch_pts_tfinal[ss]){
		time_between_events = c(time_between_events, rexp(1, lambda_vec[ss]))
		Tn = sum(time_between_events)
		}		
		actual_switch_pts = c(actual_switch_pts, Tn)
		ss = ss+1
	}
	time_events =cumsum(time_between_events)

	Zn = c(0,unlist(lapply(as.list(time_seq[-1]), max_less_index_function, vector = time_events )))

sim_switch_pt_index = unlist(lapply(as.list(actual_switch_pts[-(num_switch+1)]), max_less_index_function, vector = time_seq))

if(length(spring_const_vec) == 1){
	spring_const_vec = rep(spring_const_vec, num_switch +1)
}

if( length(D_vec) == 1){
	D_vec = rep(D_vec, num_switch +1)
}

spring_const_state_vec = rep(spring_const_vec,times = diff(c(0, sim_switch_pt_index, length(time_seq))))
D_state_vec = rep(D_vec,times = diff(c(0, sim_switch_pt_index, length(time_seq))))

switch_pt_state_vec = rep(c(1, sim_switch_pt_index),times = diff(c(0, sim_switch_pt_index, length(time_seq))))

##=============================================
##Euler M
##=============================================
Xn_EM = c(rnorm(n = 1, mean = Zn[1],sd = 0.001) )
	
for(n in 1:(length(Zn)-1)){
	Xn_EM[n+1] = Xn_EM[n] - spring_const_state_vec[n+1]*(Xn_EM[n]- Zn[n])*time_step + sqrt(D_state_vec[n+1])*sqrt(time_step)*rnorm(n = 1, mean =0, sd =1)
}
##=============================================
##Using the exact solution and the fact we know the motor position for 0 <= t <=T_final
##=============================================

Xn_exact = c(rnorm(n = 1, Zn[1], 0.001))
number_events = 0:length(time_between_events)

for( n in 1:(length(Zn)-1)){
	time_bds = c(time_seq[n], time_seq[n+1])
	multiple_event_index = intersect(which(time_events >= time_bds[1]), which(time_events <= time_bds[2]))
	
	if(length(multiple_event_index) == 0){ 
#Case 1: when no events happen between the interval [tn, t_n+1] so Z_n = Z_n+1
		dt_integral = Zn[n+1]*(1 - exp(-diff(time_bds)*spring_const_state_vec[n+1]))
	}else{
# Case 2: at least one event occurs between the interval [tn, t_n+1] so Z_n =! Z_n+1	
		time_event_n = sort(c(time_bds, time_events[multiple_event_index]))	
		interval_n  = diff(time_event_n)
		Z_continuous = c(number_events[multiple_event_index], Zn[n+1])
		dt_integral =sum(Z_continuous*(exp(-1*spring_const_state_vec[n+1]*(time_bds[2] - time_event_n)[-1]) - exp(-1* spring_const_state_vec[n+1]*(time_bds[2] - time_event_n)[-length(time_event_n)] )))
		}

	switch_state_term = Xn_exact[switch_pt_state_vec[n+1]]*(1 - exp(-1*spring_const_state_vec[n+1]* simulation_time_step))
	
	OU_var = (D_state_vec[n+1]/(spring_const_state_vec[n+1]))*(1 - exp(-spring_const_state_vec[n+1]*time_step*2))
	Xn_exact[n+1] = Xn_exact[n]*exp(-spring_const_state_vec[n+1]*time_step) + dt_integral + sqrt(OU_var)*rnorm(1, mean = 0, sd = 1)

	} #end of the simulate Xn - the cargo process


obs_index = seq(1, length(time_seq), by = Delta/time_step)
obs_time = time_seq[obs_index]
obs_Zn = Zn[obs_index]
obs_Xn_EM = Xn_EM[obs_index]; obs_Xn_exact= Xn_exact[obs_index]


if(plot_it == TRUE){
	
plot(time_seq, Zn, type = "l", xlab = "Time", ylab = "Position", ylim = range(Xn_EM, Xn_exact, Zn), lwd = 2)
abline(v = actual_switch_pts, col = "navy", lty =2)
lines(time_seq, Xn_EM, col = "dodgerblue3")
lines(time_seq, Xn_exact, type = "l", col ="springgreen3")
	
plot(obs_time, obs_Zn, type = "l", xlab = "Time", ylab = "Position", lwd = 2)
lines(obs_time, obs_Xn_EM, col = "dodgerblue3")
lines(obs_time, obs_Xn_exact, type = "l", col ="springgreen3")
legend("topleft", c("Motor", "EM", "Exact"), col = c("black", "dodgerblue3", "springgreen3"), lty = c(1,1,1))
}

return(list(time = obs_time, motor = obs_Zn, cargo = obs_Xn_exact, cargoEM = obs_Xn_EM, sim_tau_index = sim_switch_pt_index, true_tau = actual_switch_pts))


}






