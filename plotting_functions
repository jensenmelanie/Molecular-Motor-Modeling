

##===============================================================
## Plotting for posterior samples of an MCMC algorithm where 
## parameter values change over states
##===============================================================

plot_samples = function(samples, parname, log_samp = FALSE, plot_range = NA,every_kth = 1, burn_in_per = 0.5){
	
	if(is.matrix(samples) ==TRUE){
		num_states = ncol(samples)
		plot_shape = c(2, ceiling(min(8, num_states)/2))
	}else{
		num_states = 1; plot_shape = c(1,1)
		samples = matrix(samples, ncol = 1)
		}
	
	num_samples = nrow(samples)
	sampling_index = (ceiling(num_samples*burn_in_per)+1): num_samples
	every_kth = sampling_index[seq(1,length(sampling_index), by = every_kth)]
		
	
	
	par(mfrow =plot_shape, mar = c(5,4,1,1))
	
	
	if(log_samp == FALSE){
	
		for(st in 1:num_states){
	
			if(is.na(plot_range)[1]==TRUE){
				plot(every_kth, samples[every_kth,st], xlab = "Iterations", ylab = "Posterior samples", main = parname[st], type = "l")
			}else{
				plot(every_kth, samples[every_kth,st], xlab = "Iterations", ylab = "Posterior samples", main = parname[st], type = "l",ylim = plot_range)
				
				} #end of the plot range loop
	
		
	
		}# end of the state loop
	
	} else{
		
		for(st in 1:num_states){
		
		if(is.na(plot_range)[1]==TRUE){
				plot(every_kth, log10(samples[every_kth,st]), xlab = "Iterations", ylab = "log10 Posterior samples", main = parname[st], type = "l", yaxt = "n")
		log_at = floor(range(log10(samples[every_kth,st]))[1]):ceiling(range(log10(samples[every_kth,st]))[2])
		log_lab = paste("10^", log_at)
		
		axis(2, at = log_at, log_lab, las = 2, cex.axis = 0.8)
		
		
		} else{
			plot(every_kth, log10(samples[every_kth,st]), xlab = "Iterations", ylab = "log10 Posterior samples", main = parname[st], type = "l", ylim = plot_range)
			
			
			} # end of the given range loop
			
		}# end of the number of states loop
		
	} # end of the log loop
	
	
	
}


library(ggplot2)
library(RColorBrewer)
mellow.color.pal = colorRampPalette(rev(brewer.pal(11,'Spectral')))

##---------------------------------
##Posterior Sample Histograms
##------------------------------=
plot_post_hist = function(post_samp, parname, every_kth = 1, warmup = 0.5){
	every_kth_index = seq((ceiling(warmup*length(post_samp))+1),length(post_samp),by = every_kth)
	
	post_samp_df = data.frame(samps = post_samp[every_kth_index])
	qplot(post_samp_df$samp, geom= 'blank') + geom_line(aes(y = ..density.., color = "Emperical"), stat = 'density') + geom_histogram(aes(y = ..density..), alpha = 0.4) + scale_colour_manual(name = 'Density', values = c('dodgerblue3')) + theme(legend.position = c(0.85, 0.85)) + labs(x = 'Posterior sample value', y = "Density", title = parname)
}


plot_post_histNorm = function(post_samp, parname, every_kth = 1, warmup = 0.5){
	every_kth_index = seq((ceiling(warmup*length(post_samp))+1),length(post_samp),by = every_kth)
	
	post_samp_df = data.frame(samps = post_samp[every_kth_index])
	qplot(post_samp_df$samp, geom= 'blank') + geom_line(aes(y = ..density.., color = "Emperical"), stat = 'density') + stat_function(fun = dnorm, args = list(mean = mean(post_samp_df$samp), sd = sd(post_samp_df$samp)),aes(colour = 'Normal')) + geom_histogram(aes(y = ..density..), alpha = 0.4) + scale_colour_manual(name = 'Density', values = c('dodgerblue3', 'springgreen3')) + theme(legend.position = c(0.85, 0.85)) + labs(x = 'Posterior sample value', y = "Density", title = parname)
}


##---------------------------------
##Posterior Sample Violin plots
##--------------------------------
plot_post_violin = function(post_samp, parname, par_range= NA, every_kth = 1, warmup = 0.5){

num_samples = nrow(post_samp)
num_par = ncol(post_samp)

every_kth_index = seq(ceiling(warmup*num_samples)+1, num_samples, by= every_kth)
num_samp_k = length(every_kth_index)


my_colors = mellow.color.pal(num_par +2)
	if(sum(as.numeric(my_colors == "#FFFFBF")) >0 ){
		my_colors = my_colors[- which(my_colors == "#FFFFBF")]
	}else{
		my_colors = my_colors[1:(num_par +1)]
	}

par_lab = 1:num_par
par_mat = cbind(rep(par_lab,  each =num_samp_k ),c(post_samp[every_kth_index,]))
par_data = data.frame(group = par_mat[,1], value = par_mat[,2])

if(is.na(par_range[1]) == TRUE){
	par_range = range(par_data['value'])
}

 ggplot(par_data, aes(x = as.factor(group), y = value, fill = as.factor(group))) + geom_violin()  + scale_fill_manual(values = my_colors, name = "Parameter", labels = parname)  + labs(y = "Parameter Value", x = "State Index") + labs(title = "Posterior Sample Violin Plot") + ylim(par_range[1], par_range[2])


} #End of function


##---------------------------------
##Joint Posterior Samples for 3 parameters (one on x-axis, y-axis, point color)
##--------------------------------

plot_post_3par =  function(post_samp, parname, every_kth = 1, warmup = 0.5, true_values = NA){

num_samples = nrow(post_samp)
every_kth_index = seq(ceiling(warmup*num_samples)+1, num_samples, by= every_kth)
	
post_samp_df = data.frame(par1 = post_samp[every_kth_index,1], par2 = post_samp[every_kth_index,2], par3 = post_samp[every_kth_index,3])

	
my_plot = ggplot(data = post_samp_df,  aes(x = par1, y = par2,colour = par3), alpha = 0.75)	+ geom_point()+labs(x = parname[1], y = parname[2],colour = parname[3], title = "Posterior Samples")

if(is.na(true_values[1]) == FALSE){
	my_plot + geom_hline(aes(yintercept = true_values[2]), color = "firebrick3",linetype = 2, size = 1 ) + geom_vline(aes(xintercept = true_values[1]), color = "firebrick3",linetype = 2, size = 1 )
}else{my_plot}
	
}

