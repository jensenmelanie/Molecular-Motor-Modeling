library(RColorBrewer)
mellow.color.pal = colorRampPalette(rev(brewer.pal(11,'Spectral')))
##===============================================================
## Helper functions
##===============================================================
get_colors = function(num_colors){
	my_colors = mellow.color.pal(num_colors +2)
	if(sum(as.numeric(my_colors == "#FFFFBF")) >0 ){
		my_colors = my_colors[- which(my_colors == "#FFFFBF")]
	}else{
		my_colors = my_colors[1:(num_colors +1)]
	}
	return(my_colors)
} 

MAP_est = function(post_samp, every_kth=1, warmup= 0.5){
	num_samp = length(post_samp)
	
	every_kth_seq = seq(ceiling(warmup*num_samp)+ every_kth, num_samp, every_kth)
	
	post_samp_k = post_samp[every_kth_seq]
	possible_values = sort(unique(post_samp_k))
	return(possible_values[which.max(summary(as.factor(post_samp_k)))])		
}

##===============================================================
## Plotting for posterior samples of an MCMC algorithm where 
## parameter values change over states
##===============================================================

plot_samples = function(samples, parname, log_samp = FALSE, plot_range = NA,every_kth = 1, burn_in_per = 0.5){
	
	if(is.matrix(samples) ==TRUE){
		num_states = ncol(samples)
		plot_shape = c(2, ceiling(min(8, num_states)/2))
	}else{
		num_states = 1; plot_shape = c(1,1)
		samples = matrix(samples, ncol = 1)
		}
	
	num_samples = nrow(samples)
	sampling_index = (ceiling(num_samples*burn_in_per)+1): num_samples
	every_kth = sampling_index[seq(1,length(sampling_index), by = every_kth)]
		
	
	
	par(mfrow =plot_shape, mar = c(5,4,1,1))
	
	
	if(log_samp == FALSE){
	
		for(st in 1:num_states){
	
			if(is.na(plot_range)[1]==TRUE){
				plot(every_kth, samples[every_kth,st], xlab = "Iterations", ylab = "Posterior samples", main = parname[st], type = "l")
			}else{
				plot(every_kth, samples[every_kth,st], xlab = "Iterations", ylab = "Posterior samples", main = parname[st], type = "l",ylim = plot_range)
				
				} #end of the plot range loop
	
		
	
		}# end of the state loop
	
	} else{
		
		for(st in 1:num_states){
		
		if(is.na(plot_range)[1]==TRUE){
				plot(every_kth, log10(samples[every_kth,st]), xlab = "Iterations", ylab = "log10 Posterior samples", main = parname[st], type = "l", yaxt = "n")
		log_at = floor(range(log10(samples[every_kth,st]))[1]):ceiling(range(log10(samples[every_kth,st]))[2])
		log_lab = paste("10^", log_at)
		
		axis(2, at = log_at, log_lab, las = 2, cex.axis = 0.8)
		
		
		} else{
			plot(every_kth, log10(samples[every_kth,st]), xlab = "Iterations", ylab = "log10 Posterior samples", main = parname[st], type = "l", ylim = plot_range)
			
			
			} # end of the given range loop
			
		}# end of the number of states loop
		
	} # end of the log loop
	
	
	
}


library(ggplot2)
library(RColorBrewer)
mellow.color.pal = colorRampPalette(rev(brewer.pal(11,'Spectral')))

##---------------------------------
##Posterior Sample Histograms
##------------------------------=
plot_post_hist = function(post_samp, parname, every_kth = 1, warmup = 0.5){
	every_kth_index = seq((ceiling(warmup*length(post_samp))+1),length(post_samp),by = every_kth)
	
	post_samp_df = data.frame(samps = post_samp[every_kth_index])
	qplot(post_samp_df$samp, geom= 'blank') + geom_line(aes(y = ..density.., color = "Emperical"), stat = 'density') + geom_histogram(aes(y = ..density..), alpha = 0.4) + scale_colour_manual(name = 'Density', values = c('dodgerblue3')) + theme(legend.position = c(0.85, 0.85)) + labs(x = 'Posterior sample value', y = "Density", title = parname)
}


plot_post_histNorm = function(post_samp, parname, every_kth = 1, warmup = 0.5){
	every_kth_index = seq((ceiling(warmup*length(post_samp))+1),length(post_samp),by = every_kth)
	
	post_samp_df = data.frame(samps = post_samp[every_kth_index])
	qplot(post_samp_df$samp, geom= 'blank') + geom_line(aes(y = ..density.., color = "Emperical"), stat = 'density') + stat_function(fun = dnorm, args = list(mean = mean(post_samp_df$samp), sd = sd(post_samp_df$samp)),aes(colour = 'Normal')) + geom_histogram(aes(y = ..density..), alpha = 0.4) + scale_colour_manual(name = 'Density', values = c('dodgerblue3', 'springgreen3')) + theme(legend.position = c(0.85, 0.85)) + labs(x = 'Posterior sample value', y = "Density", title = parname)
}


##---------------------------------
##Posterior Sample Violin plots
##--------------------------------
plot_post_violin = function(post_samp, parname, par_range= NA, every_kth = 1, warmup = 0.5){

num_samples = nrow(post_samp)
num_par = ncol(post_samp)

every_kth_index = seq(ceiling(warmup*num_samples)+1, num_samples, by= every_kth)
num_samp_k = length(every_kth_index)


my_colors = mellow.color.pal(num_par +2)
	if(sum(as.numeric(my_colors == "#FFFFBF")) >0 ){
		my_colors = my_colors[- which(my_colors == "#FFFFBF")]
	}else{
		my_colors = my_colors[1:(num_par +1)]
	}

par_lab = 1:num_par
par_mat = cbind(rep(par_lab,  each =num_samp_k ),c(post_samp[every_kth_index,]))
par_data = data.frame(group = par_mat[,1], value = par_mat[,2])

if(is.na(par_range[1]) == TRUE){
	par_range = range(par_data['value'])
}

 ggplot(par_data, aes(x = as.factor(group), y = value, fill = as.factor(group))) + geom_violin()  + scale_fill_manual(values = my_colors, name = "Parameter", labels = parname)  + labs(y = "Parameter Value", x = "State Index") + labs(title = "Posterior Sample Violin Plot") + ylim(par_range[1], par_range[2])


} #End of function


##---------------------------------
##Joint Posterior Samples for 3 parameters (one on x-axis, y-axis, point color)
##--------------------------------

plot_post_3par =  function(post_samp, parname, every_kth = 1, warmup = 0.5, true_values = NA){

num_samples = nrow(post_samp)
every_kth_index = seq(ceiling(warmup*num_samples)+1, num_samples, by= every_kth)
	
post_samp_df = data.frame(par1 = post_samp[every_kth_index,1], par2 = post_samp[every_kth_index,2], par3 = post_samp[every_kth_index,3])

	
my_plot = ggplot(data = post_samp_df,  aes(x = par1, y = par2,colour = par3), alpha = 0.75)	+ geom_point()+labs(x = parname[1], y = parname[2],colour = parname[3], title = "Posterior Samples")

if(is.na(true_values[1]) == FALSE){
	my_plot + geom_hline(aes(yintercept = true_values[2]), color = "firebrick3",linetype = 2, size = 1 ) + geom_vline(aes(xintercept = true_values[1]), color = "firebrick3",linetype = 2, size = 1 )
}else{my_plot}
	
}


##---------------------------------
##Violin plot of all three parameters in the BM with Drift switch model
##------------------------------=

BMD_violin_plot_function = function(my_post_sample, time_seq, every_kth = 10){


every_kth_seq = seq(ceiling((0.5*dim(my_post_sample$lambda))[1])+1,dim(my_post_sample$lambda)[1], by = every_kth)


num_switches = ncol(my_post_sample$lambda) - 1
num_ksamples = length(every_kth_seq)
	my_colors = mellow.color.pal(num_switches +2)
	if(sum(as.numeric(my_colors == "#FFFFBF")) >0 ){
		my_colors = my_colors[- which(my_colors == "#FFFFBF")]
	}else{
		my_colors = my_colors[1:(num_switches +1)]
	}


## Violin for eta
eta_lab = 1:(ncol(my_post_sample$eta[every_kth_seq,]))
eta_my_mat = cbind(rep(eta_lab, each =num_ksamples),matrix(log10(my_post_sample$eta[every_kth_seq,]),ncol = 1))
eta_plot_data = data.frame(group = eta_my_mat[,1], value = eta_my_mat[,2])

eta_i_label = c()
for (i in 1:(num_switches + 1)){
	eta_i_label = c(eta_i_label, substitute(paste(eta[index]), list(index = i) ) )
}
eta_lab = "Noise"
eta_log_label = as.character(10^(-2:2))
eta_plot = ggplot(eta_plot_data, aes(x = as.factor(group), y = value, fill = as.factor(group))) + geom_violin() + scale_fill_manual(values = my_colors, name = eta_lab, labels = eta_i_label) + scale_y_continuous(breaks = seq(-2,2, by = 1), labels = eta_log_label)+ labs(x = "State Index", y = expression(paste("log"[10],"(",eta, ")"))) 

## Violin for lambda

lambda_lab = 1:(ncol(my_post_sample$lambda))
lambda_my_mat = cbind(rep(lambda_lab,  each = num_ksamples),matrix(my_post_sample$lambda[every_kth_seq,]))
lambda_plot_data = data.frame(group = lambda_my_mat[,1], value = lambda_my_mat[,2])
lambda_label = expression(lambda)
lambda_i_label = c()
for (i in 1:(num_switches + 1)){
	lambda_i_label = c(lambda_i_label, substitute(paste(lambda[index]), list(index = i) ) )
}


lambda_plot = ggplot(lambda_plot_data, aes(x = as.factor(group), y = value, fill = as.factor(group))) + geom_violin() + scale_fill_manual(values = my_colors, name = "Stepping Rate", labels = lambda_i_label) + labs(y = lambda_label, x = "State Index") 


## Violin for tau

if(is.null(dim(my_post_sample$tau)[2]) == FALSE){

tau_lab = 1:(ncol(my_post_sample$tau))
tau_my_mat = cbind(rep(tau_lab, each = num_ksamples),time_seq[my_post_sample$tau[every_kth_seq,]])
tau_plot_data = data.frame(group = tau_my_mat[,1], value = tau_my_mat[,2])

tau_i_label = c()
for (i in 1:(num_switches)){
	tau_i_label = c(tau_i_label, substitute(paste(tau[index]), list(index = i) ) )
}


tau_plot = ggplot(tau_plot_data, aes(x = as.factor(group), y = value, fill = as.factor(group))) + geom_violin() + scale_fill_manual(values = my_colors[-length(my_colors)], name = "Switch \n Points ", labels = tau_i_label  ) + labs(x = " Switch index", y = "Time (seconds) ") + ylim(time_seq[1], time_seq[length(time_seq)])
	
}else{
	
tau_lab = rep(1, length(my_post_sample$tau[every_kth_seq]))
tau_my_mat = cbind(tau_lab,time_seq[my_post_sample$tau[every_kth_seq]])
tau_plot_data = data.frame(group = tau_my_mat[,1], value = tau_my_mat[,2])
tau_plot = ggplot(tau_plot_data, aes(x = as.factor(group), y = value, fill = as.factor(group))) + geom_violin() + scale_fill_manual(values = my_colors[1])+ theme(legend.position = "none") + labs(x = "Switch Index", y = "Switch point") + ylim(time_seq[1], time_seq[length(time_seq)])
	
}	

grid.arrange( lambda_plot,tau_plot, eta_plot, layout_matrix = rbind(c(1,1,3),c(2,2,3)),top = "Violin Plots for Posterior Samples", bottom = paste(length(every_kth_seq), "posterior samples for each parameter" ))

#grid.arrange(nu_plot, tau_plot, widths = c(2,2), layout_matrix = matrix(c(1,2), nrow = 1, ncol = 2), top = "Violin Plots for Posterior Samples",bottom = paste(length(every_kth), "posterior samples for each parameter" ) )


	
} #End of function

##---------------------------------
##Plot of a trajectoy that switches state or doesnt
##--------------------------------

plot_traj_switch = function(time, Xn, tau_est_index){
	
	if(is.na(tau_est_index[1]) == TRUE){
		traj_df = data.frame(time = time, Xn = Xn)
		ggplot(data = traj_df, aes(x = time, y = Xn)) +geom_path() +labs(x = "Time", y = "Position")+ggtitle("Assuming k = 0 switch points")
	
	}else{
	
	
	if(length(which(diff(tau_est_index) < 0))>0){
		tau_est_index = sort(tau_est_index)
		print("Tau estimates are not in increasing order, figure made with sorted estimates")
	}
	
	num_states = length(tau_est_index) + 1
	num_obs = length(time)
	
	my_colors = get_colors(num_states)
	
	connect_index = sort(c(tau_est_index, tau_est_index + 1))
	state_index = rep(1:num_states, times =  diff(c(0, tau_est_index, num_obs)) )
	traj_df = data.frame(time = time, Xn = Xn, state = state_index)
	
	tau_est_df = data.frame(time = time[tau_est_index], Xn = Xn[tau_est_index])
	connect_df = data.frame(time = time[connect_index], Xn = Xn[connect_index], state = sort(rep(2:num_states, each = 2)) )
	
	ggplot(data = traj_df, aes(x = time, y = Xn,color = factor(state))) +geom_path() + geom_path(data =connect_df, aes(x = time, y = Xn))+geom_point(data = tau_est_df, aes(x = time, y = Xn , colour = as.factor(1:(num_states-1))), show.legend = F)+labs(color = "State Index", x = "Time", y = "Position")+ggtitle(paste("Assuming k =",num_states-1,"switch points"))+scale_color_manual(values = my_colors, guide = F)
	}
}

##---------------------------------
##Plot of a trajectoy that does not switch
##--------------------------------

plot_traj = function(time, Xn){
	traj_df = data.frame(time = time, Xn = Xn)
	ggplot(data = traj_df, aes(x = time, y = Xn)) +geom_path() +labs(x = "Time", y = "Position")+ggtitle("Assuming k = 0 switch points")
	}




##---------------------------------
##Posterior Sample Violin plots eta/lambda vs tau
##requires map function
##--------------------------------
plot_violin_tau_par2 = function(time,post_samp, par2_name, every_kth = 1, warmup = 0.5){
	par2_post = post_samp[[par2_name]]
	tau_post = post_samp[['tau']]
	num_obs = length(time)

	num_states = ncol(par2_post); num_switches = num_states -1
	num_samp = nrow(par2_post)
	every_kth_seq = seq(ceiling(warmup*num_samp)+ every_kth, num_samp, every_kth)
	num_ksamp = length(every_kth_seq)
	

	if(num_states == 2){
		tau_post = tau_post[every_kth_seq]
		tau_map = MAP_est(tau_post, warmup = 0, every_kth = 1)
	}else{
		tau_post = tau_post[every_kth_seq, ]
		tau_map = apply(tau_post, 2, MAP_est)	
	}
	
	par2_pos = time[round(diff(c(1, tau_map, num_obs))/2) + c(0, tau_map)]	
	par2_df = data.frame(state = rep(1:num_states, each = num_ksamp), value = c(par2_post[every_kth_seq,]), xpos = rep(par2_pos, each = num_ksamp) )
	par2_range = range(c(par2_post[every_kth_seq,]))
	par2_range[1] = par2_range[1]- par2_range[2]*0.25
	
	tau_y = max(0, par2_range[1])
	tau_df =data.frame(state = rep(1:num_switches, each = num_ksamp), value = time[tau_post], ypos = rep(tau_y,length(c(tau_post))))
	tau_map_df = data.frame(ypos = rep(tau_y, num_switches), value = time[tau_map], state = 1:num_switches)
	
	my_colors = get_colors(num_states)
	
	if(par2_name == 'lambda'){
		ylabel = expression(paste("Stepping Rate ",lambda))
	}else if(par2_name == "eta"){
		ylabel = expression(paste("Inverse Noise ",eta))
	}else{ylabel = "parname"}
	
	time_limit = range(time)
	time_limit[2] = time_limit[2]+ time_limit[2]*0.1
	time_limit[1] = time_limit[1]- time_limit[2]*0.1
	
	#ggplot(data = par2_df,aes(x = xpos, y = value, fill = as.factor(state)) ) + geom_violin()+ylim(par2_range) + xlim(time_limit)+geom_violin(data = tau_df, aes(x = value, y = ypos)) + xlab(expression(paste("Switch Point ",tau ))) + ylab(ylabel) +  geom_point(data = tau_map_df, aes(y = ypos, x = value), shape = 8,color = my_colors[1:num_switches], show.legend = F) + geom_vline(aes(xintercept = max(time)),linetype = "dashed", color = 'navy') + geom_vline(aes(xintercept =min(time)),linetype = "dashed", color = 'navy') + scale_fill_manual(values = my_colors, guide = FALSE) + ggtitle(paste("Number switches = ", num_switches))#, labels = paste("Index", 1:num_states), name = "") 

	ggplot(data = par2_df,aes(x = xpos, y = value, fill = as.factor(state)) ) + geom_violin()+ylim(par2_range) + xlim(time_limit) + xlab(expression(paste("Switch Point ",tau ))) + ylab(ylabel) +  geom_point(data = tau_map_df, aes(y = ypos, x = value), shape = 8,color = my_colors[1:num_switches], show.legend = F) + geom_vline(aes(xintercept = max(time)),linetype = "dashed", color = 'navy') + geom_vline(aes(xintercept =min(time)),linetype = "dashed", color = 'navy') + scale_fill_manual(values = my_colors, guide = FALSE) + geom_count(data = tau_df, aes(x = value, y = ypos, color = as.factor(state)), show.legend = F) + scale_color_manual(values = my_colors[1:num_switches], guide = F) + ggtitle(paste("Number switches k = ", num_switches))#, labels = paste("Index", 1:num_states), name = "") 
	
}

##---------------------------------
##plot of Posterior Bayes
##--------------------------------
plot_PBS = function(num_switches, PBS){
	PBS_df = data.frame(switch = num_switches, PBS = PBS)
	
	ggplot(PBS_df, aes(x = switch, y = PBS)) + geom_path() + geom_point(size = 2) + xlab("Number of Switches Assumed") + ylab("log10(PBS)") + ggtitle("Post Bayes Score") + scale_x_continuous(breaks  = num_switches)
	
}


