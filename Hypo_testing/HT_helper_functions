## Model Comparison Functions 

library(ggplot2)
library(mvtnorm)
library(gridExtra)

##============================================================
## Helper functions  
##============================================================
row_to_list = function(matrix){
	lapply(seq_len(nrow(matrix)), function(i) matrix[i,] )
}


every_kth_entry = function(matrix, every_kth = 1, burn_in_per = 0.5){
	mat_dim = dim(matrix)
	to_take_index = seq((ceiling(nrow(matrix)*burn_in_per) + every_kth), nrow(matrix), by = every_kth)
	if(mat_dim[2] == 1){
		return(matrix(matrix[to_take_index,], ncol = 1))
	}else{
		return(matrix[to_take_index,])
		}
}


##-------------------------------------------------------------------
## PLotting
##-------------------------------------------------------------------


plot_stats_FDR = function(stat_matrix, tau_matrix, col_lab, xlimit){
	num_paths = nrow(stat_matrix)
	
	stat_df = data.frame(col_lab = rep(col_lab, each = num_paths), stat = matrix(stat_matrix, ncol = 1), tau = matrix(tau_matrix, ncol = 1))
	
	myplot = stat_plot = ggplot(stat_df, aes(x = tau, y = stat)) + geom_point(alpha = 0.7, col = "dodgerblue3") + facet_grid(~as.factor(col_lab)) + xlim(xlimit) +labs(x = expression(tau), y = "Test Statistic")
	
	return(myplot)
	
}

plot_stats_power= function(stat_matrix, tau_matrix, col_lab, xlimit,critical_values){
	num_paths = nrow(stat_matrix)
	
	stat_df = data.frame(col_lab = rep(col_lab, each = num_paths), stat = matrix(stat_matrix, ncol = 1), tau = matrix(tau_matrix, ncol = 1))
	
	limit_df = data.frame(critical = critical_values, col_lab = col_lab)
	
	
	myplot = stat_plot = ggplot(stat_df, aes(x = tau, y = stat)) + geom_point(alpha = 0.7, col = "dodgerblue3") + facet_grid(~as.factor(col_lab)) + xlim(xlimit) +labs(x = expression(tau), y = "Test Statistic") + geom_hline(data = limit_df, aes(yintercept = critical), linetype = 'dashed')
	
	return(myplot)
	
}
##-------------------------------------------------------------------
## log likelihoods functions
##-------------------------------------------------------------------


ll_BM= function(Xn, pars){
	num_obs = length(Xn)
	mu = pars[1]; sigma_sq = pars[2]
	
	return(-(num_obs/2)*log(2*pi*sigma_sq) - (1/(2*sigma_sq))*sum((Xn - mu)^2))
}



ll_BMswitch = function(Xn, taus, thetas, sigma_sq){
	num_obs = length(Xn)
	num_switch = length(taus); num_states = num_switch + 1

	num_per_state = diff(c(0,taus,length(Xn))) 
	thetas_vec = c(rep(thetas, times = num_per_state))

	return(-sum((num_per_state/2)*log(2*pi*sigma_sq))- (1/(2*sigma_sq))*sum((Xn -thetas_vec)^2))
}

##============================================================
## AMOC Functions
##============================================================
unscale_var = function(Xn, lower, upper){
	return(sum((Xn[lower:upper]- mean(Xn[lower:upper]))^2)	)
}



AMOC_single = function(Xn, tau){
	num_obs = length(Xn)
	H_tau = (unscale_var(Xn, 1, tau) + unscale_var(Xn, tau+1, num_obs))/ num_obs
	return(((num_obs)/(tau*(num_obs - tau)))*(sum(Xn[1:tau]) -(tau/num_obs)*sum(Xn))^2*(1/H_tau))
}

AMOC_stat = function(Xn){
	num_obs = length(Xn)
	test_stat = sqrt(max(sapply(1:(num_obs-1), AMOC_single, Xn = Xn)))
	tau_opt = (1:(num_obs-1))[min(which.max(sapply(1:(num_obs-1), AMOC_single, Xn = Xn)))]
	return(list(stat = test_stat, tau_est = tau_opt))
	}




##============================================================
## Model Comparison Functions
##============================================================


##-------------------------------------------------------------------
##Posterior Bayes Score
##-------------------------------------------------------------------

PBS_BM = function(Xn, post_samples, num_switch_pts = 0){
	

	if(num_switch_pts == 0){
		
		par_mat = cbind(post_samples[["theta"]], post_samples[["sigma_sq"]])
		par_list = lapply(seq_len(nrow(par_mat)), function(i) par_mat[i,] )
		
		return(mean(exp(unlist(lapply(par_list,  ll_BM,  Xn =Xn)))))
		
	}else if(num_switch_pts == 1){

		num_samps = nrow(post_samples[[1]])

		ll_n = c()
		for(nn in 1:num_samps){
			ll_n = c(ll_n,	ll_BMswitch(Xn, post_samples[["tau"]][nn], post_samples[["theta"]][nn,], post_samples[["sigma_sq"]][nn,]) )	
		}
		return(	mean(exp(ll_n)))		

		
		}else{
		
		num_samps = nrow(post_samples[[1]])

		ll_n = c()
		for(nn in 1:num_samps){
			ll_n = c(ll_n,	ll_BMswitch(Xn, post_samples[["tau"]][nn,], post_samples[["theta"]][nn,], post_samples[["sigma_sq"]][nn,]) )	
		}
		return(	mean(exp(ll_n)))		
	}
	
}



##-------------------------------------------------------------------
## mean Lppd
##-------------------------------------------------------------------

Ell_BM = function(Xn, post_samples, num_switch_pts = 0 ){
	

	if(num_switch_pts == 0){
		
	
		par_mat = cbind(post_samples[["theta"]], post_samples[["sigma_sq"]])
		par_list = lapply(seq_len(nrow(par_mat)), function(i) par_mat[i,] )
		
		
		return(mean(unlist(lapply(par_list,  ll_BM,  Xn =Xn))))
		
	}else if (num_switch_pts == 1){

		num_samps = nrow(post_samples[[1]])

		ll_n = c()
		for(nn in 1:num_samps){
			ll_n = c(ll_n,	ll_BMswitch(Xn, post_samples[["tau"]][nn], post_samples[["theta"]][nn,], post_samples[["sigma_sq"]][nn,]) )	
		}
		return(	mean(ll_n))		
	}else{

		num_samps = nrow(post_samples[[1]])

		ll_n = c()
		for(nn in 1:num_samps){
			ll_n = c(ll_n,	ll_BMswitch(Xn, post_samples[["tau"]][nn,], post_samples[["theta"]][nn,], post_samples[["sigma_sq"]][nn,]) )	
		}
		return(	mean(ll_n))		
	}
	
}



##-------------------------------------------------------------------
## pwaic
##-------------------------------------------------------------------

pwaic_BM = function(Xn, post_samples, num_switch_pts = 0 ){
	
	if(num_switch_pts == 0){
		
		par_mat = cbind(post_samples[["theta"]], post_samples[["sigma_sq"]])
		par_list = lapply(seq_len(nrow(par_mat)), function(i) par_mat[i,] )
		
		p_s =unlist(lapply(par_list,  ll_BM,  Xn =Xn))
		return(var(p_s))
		
	}else if(num_switch_pts == 1){

		num_samps = nrow(post_samples[[1]])

		ll_n = c()
		for(nn in 1:num_samps){
			ll_n = c(ll_n,	ll_BMswitch(Xn, post_samples[["tau"]][nn], post_samples[["theta"]][nn,], post_samples[["sigma_sq"]][nn,]) )	
		}
		return(	var(ll_n))		

		
		}else{
		
		num_samps = nrow(post_samples[[1]])

		ll_n = c()
		for(nn in 1:num_samps){
			ll_n = c(ll_n,	ll_BMswitch(Xn, post_samples[["tau"]][nn,], post_samples[["theta"]][nn,], post_samples[["sigma_sq"]][nn,]) )	
		}
		return(	var(ll_n))		
	}
	
	}








##============================================================
## Bayes model comparison Functions
##============================================================

Htau_fnc = function(Xn, tau){
	N = length(Xn)
	if(tau == N){
		return(0)
	}else{
		return(sum((Xn[1:tau] - mean(Xn[1:tau]))^2) + sum((Xn[(tau+1):N] - mean(Xn[(tau+1):N]))^2))
		}
}

Rtau_fnc = function(Xn, tau){
	N = length(Xn)
	return(1 - (tau*(N-tau)*(mean(Xn[(tau+1):N]) - mean(Xn[1:tau]))^2)/(N*(N-1*var(Xn))))
}

post_pmf_tau = function(Xn){
	N = length(Xn)
	tau_vec = 1:(N-1); Ntau_vec = N- tau_vec
	
	p_tau_unnormal = exp((1/2)*(log(N)- (log(tau_vec)+ log(Ntau_vec)))- (N-2)/2*log(sapply(1:(N-1),Htau_fnc,Xn = Xn)))
	
	return(p_tau_unnormal)
	#/sum(p_tau_unnormal))
}

post_approx_pmf_tau = function(Xn){
	N = length(Xn)
	tau_vec = 1:(N-1); Ntau_vec = N- tau_vec
	p_tau_unnormal = (N/(tau_vec*Ntau_vec))^(1/2)*exp(- N*sapply(1:(N-1), Rtau_fnc, Xn =Xn)/2)
	return(p_tau_unnormal)
	#return(p_tau_unnormal/sum(p_tau_unnormal))
}



bayes_stats = function(Xn, num_post_samp, approx_tau = FALSE){
	N = length(Xn)

##MODEL WITH ZERO SWITCHes
	post_samp_null = list()
	var_theta = 	var(Xn)/N; mu_theta = mean(Xn)
	theta_null = rt(num_post_samp, df = N-1)*sqrt(var_theta) + mu_theta
	post_samp_null$theta = matrix(theta_null, nrow = num_post_samp, ncol = 1)
	
	null_rates = sapply(theta_null, function(theta){sum((Xn- theta)^2)/2})
	post_samp_null$sigma_sq = matrix(1/sapply(null_rates, rgamma, n = 1, shape = N/2),nrow = num_post_samp, ncol = 1)
	Ell_null = Ell_BM(Xn, post_samp_null)
	lPBS_null = log10(PBS_BM(Xn, post_samp_null))

##MODEL WITH ONE SWITCH
	Htau_all_tau = sapply(1:(N-1),Htau_fnc,Xn = Xn)
	post_samp= list()
	post_samp$tau = matrix(nrow = num_post_samp, ncol = 1)
	post_samp$theta = matrix(nrow = num_post_samp, ncol = 2)
	post_samp$sigma_sq = matrix(nrow = num_post_samp, ncol = 1)
	
	
	if(approx_tau == FALSE){
		post_pmf_tau = post_pmf_tau(Xn)	
	}else{
		post_pmf_tau = post_approx_pmf_tau(Xn)
		}
	
	for(ps in 1:num_post_samp){

	## Sampling from the posterior distribution
		tau_i = sample(1:(N-1), size =1, replace = TRUE,prob = post_pmf_tau)

		mu_t = c(mean(Xn[1:tau_i]), mean(Xn[(tau_i+1):N]))
		Sigma_t = (Htau_all_tau[tau_i]/(N-2))*cbind(c(1/tau_i, 0), c(0, 1/(N-tau_i)))
		theta_vec_i = rmvt(1, sigma = Sigma_t, df = N-2, delta = mu_t)

		eta_rate = (1/2)*(sum((Xn[1:tau_i] - theta_vec_i[1])^2) + sum((Xn[(tau_i+1):N] - theta_vec_i[2])^2))
		sigma_sq_i = 1/rgamma(1, shape = N/2, rate = eta_rate)

		post_samp$tau[ps,1] = tau_i
		post_samp$theta[ps,] = theta_vec_i
		post_samp$sigma_sq[ps,1] = sigma_sq_i

	} #end get post samp


	PBS = PBS_BM(Xn, post_samp, num_switch_pts = 1)
	Ell = Ell_BM(Xn, post_samp, num_switch_pts = 1)
	pwaic = pwaic_BM(Xn, post_samp, num_switch_pts = 1)
	tau = which.max(post_pmf_tau)

	return(list(lPBS_null = lPBS_null, Ell_null = Ell_null, lPBS = log10(PBS), Ell = Ell, WAIC = -2*(log(PBS) - pwaic), tau = tau ))

}



bayes_stats_sampling_FDR = function(Xn, num_post_samp,sampling_pars){
	N = length(Xn)

##MODEL WITH ZERO SWITCHes
	post_samp_null = list()
	var_theta = 	var(Xn)/N; mu_theta = mean(Xn)
	theta_null = rt(num_post_samp, df = N-1)*sqrt(var_theta) + mu_theta
	post_samp_null$theta = matrix(theta_null, nrow = num_post_samp, ncol = 1)
	
	null_rates = sapply(theta_null, function(theta){sum((Xn- theta)^2)/2})
	post_samp_null$sigma_sq = matrix(1/sapply(null_rates, rgamma, n = 1, shape = N/2),nrow = num_post_samp, ncol = 1)
	Ell_null = Ell_BM(Xn, post_samp_null,num_switch_pts = 0)
	lPBS_null = log10(PBS_BM(Xn, post_samp_null, num_switch_pts = 0))

##MODEL WITH ONE SWITCH
	post_samp= list()
	post_samp$tau = matrix(nrow = num_post_samp, ncol = 1)
	post_samp$theta = matrix(nrow = num_post_samp, ncol = 2)
	post_samp$sigma_sq = matrix(nrow = num_post_samp, ncol = 1)
	
	
	num_good = FALSE
	while( num_good == FALSE){
		draw_samp = Norm_switchMean_chains(Xn, num_switches = 1, sampling_pars$num_chains, sampling_pars$cand_tau_step_per, sampling_pars$min_dur, sampling_pars$iterations, sampling_pars$warmup_per, sampling_pars$every_kth[1], sampling_pars$plot_it)
		
		empty_index = which(is.na(draw_samp$Rhat == TRUE))
		num_par = length(draw_samp$Rhat[-empty_index])
		num_Rhat_good = sum(draw_samp$Rhat[-empty_index] <= 1.1)
		num_neff_good = sum(as.numeric(draw_samp$neff[-empty_index] > (5*2* sampling_pars$num_chains)))
		
		ind_conv = as.numeric(num_Rhat_good == num_par) + as.numeric(num_neff_good == num_par)
		
		if(ind_conv == 2){
			num_good = TRUE
			num_samps = nrow(draw_samp$post_samp[[1]][[1]])
			seq_k = floor(seq(1, num_samps, length = floor(num_post_samp/sampling_pars$num_chains)))
			post_samp$tau[,1] =floor(c((sapply(1: sampling_pars$num_chains, function(index){draw_samp$post_samp[[index]]$tau}))[seq_k,]))
			
		post_samp$theta[,1] = c((sapply(1: sampling_pars$num_chains, function(index){draw_samp$post_samp[[index]]$theta[,1]}))[seq_k,])
		post_samp$theta[,2] = c((sapply(1: sampling_pars$num_chains, function(index){draw_samp$post_samp[[index]]$theta[,2]}))[seq_k,])
		
		post_samp$sigma_sq[,1] =1/c((sapply(1:sampling_pars$num_chains, function(index){draw_samp$post_samp[[index]]$eta}))[seq_k,])
	
		} #end of setting samples
		
	
	} # End of the while loop
	
	
	
	all_tau_samps = c((sapply(1:sampling_pars$num_chains, function(index){draw_samp$post_samp[[index]]$tau})))
	

	PBS = PBS_BM(Xn, post_samp, num_switch_pts = 1)
	Ell = Ell_BM(Xn, post_samp, num_switch_pts = 1)
	pwaic = pwaic_BM(Xn, post_samp, num_switch_pts = 1)
	tau = (density(all_tau_samps)$x)[which.max(density(all_tau_samps)$y)]


	return(list(lPBS_null = lPBS_null, Ell_null = Ell_null, lPBS = log10(PBS), Ell = Ell, WAIC = -2*(log(PBS) - pwaic), tau = tau ))

}







