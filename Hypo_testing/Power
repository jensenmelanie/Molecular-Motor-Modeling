power_fnc = function(mu, critical,N_values, sigma_sq_values,num_paths = 100, num_post_samp = 100){

## --------- ----------------------------
##Output Variables
##--------------------------------------

stat_power = list()
stat_power$AMOC = matrix(nrow = length(N_values), ncol = length(sigma_sq_values))
stat_power$PBF = matrix(nrow = length(N_values), ncol = length(sigma_sq_values))
stat_power$Ell = matrix(nrow = length(N_values), ncol = length(sigma_sq_values))
stat_power$WAIC = matrix(nrow = length(N_values), ncol = length(sigma_sq_values))

for(l in 1:length(stat_power)){
	rownames(stat_power[[l]]) = N_values;
	colnames(stat_power[[l]]) = sigma_sq_values
}



## --------- ----------------------------
##Start of loop
##--------------------------------------


for( n in 1:length(N_values)){

	AMOC_Zn = matrix(nrow = num_paths,ncol = length(sigma_sq_values))
	AMOC_tau = matrix(nrow = num_paths,ncol = length(sigma_sq_values))

	PBF = matrix(nrow = num_paths,ncol = length(sigma_sq_values))
	Ell = matrix(nrow = num_paths,ncol = length(sigma_sq_values))	
	WAIC = matrix(nrow = num_paths, ncol = length(sigma_sq_values))
	Bayes_tau = matrix(nrow = num_paths,ncol = length(sigma_sq_values))	

	for( s in 1:length(sigma_sq_values)){
				
		# Set the parameters to simulate the data		
		N = N_values[n]; true_tau = floor(N/2)
		sigma_sq = sigma_sq_values[s]
		count_approx = 0
		for(np in 1: num_paths){
			Xin = c(rnorm(n = N/2, mean = 0, sd = sqrt(sigma_sq)), rnorm(n = N/2, mean = mu, sd = sqrt(sigma_sq))) 
	

			## --------- Frequentist statistics ----------------------------
			AMOC_stats = unlist(AMOC_stat(Xin))
			AMOC_Zn[np,s] = AMOC_stats[1]
			AMOC_tau[np,s] = AMOC_stats[2]

			## --------- Bayesian statistics ----------------------------
			approx_tau_post = FALSE
			if((length(which(post_pmf_tau(Xin)==0)) == (N-1)) == TRUE){
				approx_tau_post = TRUE
				count_approx = 1+count_approx
			}

		
			Bayes_stats = bayes_stats(Xin,num_post_samp, approx_tau = approx_tau_post)
			Ell[np,s] = Bayes_stats$Ell - Bayes_stats$Ell_null
			PBF[np,s] = Bayes_stats$lPBS - Bayes_stats$lPBS_null
			WAIC[np,s] = Bayes_stats$WAIC
			Bayes_tau[np,s] = Bayes_stats$tau

		}# end of the particle loop
		print(paste("N = ", N, "s = ",sigma_sq))

		print(paste("Number of times post tau is approximated ", count_approx))
	} # End of the sigma_sq loop


AMOC_power_fnc = function(index){
	if(is.na(critical$AMOC[n,index]) ==TRUE){return(NA)
		}else{return(length(which(AMOC_Zn[,index] >= critical$AMOC[n,index])))
			}
}

Ell_power_fnc = function(index){
	if(is.na(critical$Ell[n,index]) == TRUE){return(NA)
		}else{return(length(which(Ell[,index] >= critical$Ell[n,index])))
			}
}

PBF_power_fnc = function(index){
	if(is.na(critical$PBF[n,index]) ==TRUE){return(NA)
		}else{return(length(which(PBF[,index] >= critical$PBF[n,index])))
			}
}

WAIC_power_fnc = function(index){
	if(is.na(critical$WAIC[n,index]) ==TRUE){return(NA)
		}else{return(length(which(PBF[,index] >= critical$WAIC[n,index])))
			}
}


stat_power$AMOC[n,] =sapply(1:length(sigma_sq_values), AMOC_power_fnc)/num_paths
stat_power$Ell[n,] = sapply(1:length(sigma_sq_values), Ell_power_fnc)/num_paths
stat_power$PBF[n,] = sapply(1:length(sigma_sq_values), PBF_power_fnc)/num_paths
sta_power$WAIC[n,] =  sapply(1:length(sigma_sq_values), WAIC_power_fnc)/num_paths



AMOC_plot = plot_stats_power(AMOC_Zn, AMOC_tau, sigma_sq_values, c(0, N), critical$AMOC[n,] ) + ggtitle(paste("AMOC, mu = ",mu, ", N = ",N))
Ell_plot = plot_stats_power(Ell, Bayes_tau, sigma_sq_values, c(0, N),critical$Ell[n,] ) + ggtitle(paste("Ell, mu = ",mu, ", N = ",N))
PBF_plot = plot_stats_power(PBF, Bayes_tau, sigma_sq_values, c(0, N) ,critical$PBF[n,]) + ggtitle(paste("PBF, mu = ",mu, ", N = ",N))
WAIC_plot = plot_stats_power(WAIC, Bayes_tau, sigma_sq_values, c(0, N) ,critical$PBF[n,]) + ggtitle(paste("WAIC, mu = ",mu, ", N = ",N))


grid.arrange(AMOC_plot, Ell_plot, PBF_plot, WAIC_plot,nrow = 4)

}#End of N loop


model_comp_df = data.frame( N = rep(N_values, times = length(sigma_sq_values)), sigma = rep(sigma_sq_values, each = length(N_values)), stat = c(c(stat_power$Ell),c(stat_power$PBF),c(stat_power$AMOC), c(stat_power$WAIC)),stat_type = rep(c("Ell", "PBF", "AMOC", "WAIC"), each = length(N_values)*length(sigma_sq_values)))

print(ggplot(model_comp_df) + geom_point(aes(x = N, y = stat, color = as.factor(sigma))) + geom_line(aes(x = N, y = stat, color = as.factor(sigma))) + facet_grid(~stat_type) +labs(x = "Number of Observations", y= "Power") + ylim(0,1)+ scale_color_discrete(name = expression(sigma))+ scale_x_log10()+ ggtitle("Power for mu = ",mu))


return(stat_power)


}# end of the function
